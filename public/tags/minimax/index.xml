<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>minimax on zaccaria-af</title>
    <link>https://zaccaria-af.github.io/tags/minimax/</link>
    <description>Recent content in minimax on zaccaria-af</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2023 15:03:02 +0200</lastBuildDate><atom:link href="https://zaccaria-af.github.io/tags/minimax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2048 Part 2 - Expectimax</title>
      <link>https://zaccaria-af.github.io/posts/2048-searchai/</link>
      <pubDate>Tue, 17 Oct 2023 15:03:02 +0200</pubDate>
      
      <guid>https://zaccaria-af.github.io/posts/2048-searchai/</guid>
      <description>Writing the algorithm Our second task in a university assignment was to build an agent for 2048, and this time, by using Expectimax. This algorithm is similar to the Minimax algorithm I used in the first task but introduces a new element â€“ the chance node. In Minimax, we work with maximizer and minimizer nodes, but in Expectimax, we deal with a maximizer and a chance node. The chance node calculates the expected value of various stochastic outcomes, such as randomly placing either a 3 or a 4 on an available empty space in 2048, with probabilities of 0.</description>
    </item>
    
    <item>
      <title>Building a heuristig agent for the game 2048</title>
      <link>https://zaccaria-af.github.io/posts/2024-heuristic-agent/</link>
      <pubDate>Mon, 02 Oct 2023 17:31:02 +0200</pubDate>
      
      <guid>https://zaccaria-af.github.io/posts/2024-heuristic-agent/</guid>
      <description>For our AI lab at ZHAW, we were tasked with programming a heuristic agent for the game 2048. In this post, I will document my approach and what I learned.
Initial Approach: Heuristics for Improved Play Finding the right heuristics Our first goal was to design heuristics and an algorithm that could outperform a random-move agent. I started by implementing two key heuristics:
 Number of Empty Tiles: This metric represents the number of available moves on the board, with more empty tiles indicating more possible actions.</description>
    </item>
    
  </channel>
</rss>
